use mavenmovies;

-- Practice Question 
-- Basic Aggregate Functions: 

/* Question 1: 

Retrieve the total number of rentals made in the Sakila database. 

Hint: Use the COUNT() function. */

SELECT COUNT(*) AS 'Total No of Rentals Made' FROM rental;

-- Answer : In this query, we can use either the rental ID or COUNT(*) from rental; the output will be the same. The SQL will count the rows in the table.

/*Question 2: 

Find the average rental duration (in days) of movies rented from the Sakila database.

Hint: Utilize the AVG() function. */

SELECT AVG(rental_duration) as 'Rental Duration in days' FROM film;

-- Answer : In this query we use the avg command in the rental_duration, which will give the avg of the rental_duration from the film table, which is in days.

-- String Fuctions:

/* Question 3: 

Display the first name and last name of customers in uppercase. 

Hint: Use the UPPER () function. */

SELECT UPPER(CONCAT(first_name, ' ', last_name)) AS 'Full Name' FROM customer;

-- Answer : In this query we add the CONCAT command, which is used to combine first_name and last_name with a space in between, and UPPER will make all the characters in upper case from the customer table.

/* Question 4: 

Extract the month from the rental date and display it alongside the rental ID. 

Hint: Employ the MONTH() function. */

SELECT rental_id, MONTH(rental_date) AS 'Rental Month' FROM rental;

-- Answer : In this query we use the month command to extract the month from the rental_date.

-- GROUP BY:

/* Question 5: 

Retrieve the count of rentals for each customer (display customer ID and the count of rentals). 

Hint: Use COUNT () in conjunction with GROUP BY. */

SELECT customer_id, COUNT(rental_id) AS 'Count of Rental' FROM rental GROUP BY customer_id;

-- Answer : In this query we use the GROUP BY command, which combines with the customer_id to count the number of rentals, which is the rental ID.

/* Question 6: 

Find the total revenue generated by each store. 

Hint: Combine SUM() and GROUP BY. */

SELECT payment_id, SUM(amount) AS 'Total Revenue' FROM payment GROUP BY payment_id;

-- Answer : In this query we use the payment_id and sum of amount to get the total revenue of the store and also group by the payment_id from payment tabel.

-- Joins:

/* Question 7:

Display the title of the movie, customer s first name, and last name who rented it. 

Hint: Use JOIN between the film, inventory, rental, and customer tables. */ 

SELECT f.title AS MovieTitle, c.first_name AS 'Customer First Name', c.last_name AS 'Customer Last Name'
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
JOIN customer c ON r.customer_id = c.customer_id;

/* Answer : This query gets the movie title along with the customer's first and last name for each rental.  
The `film` table provides the movie titles, while the `customer` table provides the customer's details.  
To construct the connections, the query uses multiple `JOIN` clauses: the `rental` table is joined with the `inventory` table through the `inventory_id` column, which 
is then linked to the `film` table via the `film_id`.  Similarly, the `customer` table is connected to the `rental` table using the `customer_id` column.  
The final result combines relevant information from various tables and assigns meaningful names to improve the output's readability. */

/* Question 8: 

Retrieve the names of all actors who have appeared in the film "Gone with the Wind." 

Hint: Use JOIN between the film actor, film, and actor tables. */

SELECT a.first_name AS 'First Name', a.last_name AS 'Last Name'
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
WHERE LOWER(f.title) = LOWER('Gone with the Wind');

SELECT a.first_name AS 'First Name', a.last_name AS 'Last Name'
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
WHERE LOWER(f.title) = LOWER('GONE TROUBLE');

/* Answer : This query gets the first and last names of all actors who appeared in a film titled "Gone with the Wind" by joining the `actor`, `film_actor`, and `film` tables.  
The `film_actor` table works as a connection between the `actor` and `film` tables, connected actors to the films they appeared in.  
The query then filters the results using a case-insensitive comparison (`LOWER`) to guarantee that variations in letter casing do not influence the matching of the movie title.  
However, while doing this query, I noticed that there is no film titled "Gone with the Wind" in the database. Instead, the database contains a film titled "GONE TROUBLE."  
As a result, while the query does not get any actors for "Gone with the Wind," 
we can alter the query to get the actors who appeared in "GONE TROUBLE" by just changing the title in the `WHERE` clause. */

-- GROUP BY :

/* Question 1: 

Determine the total number of rentals for each category of movies. 

Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY. */

SELECT c.name AS 'Category Name', COUNT(r.rental_id) AS 'Total No Rentals'
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY c.name;

/* Answer : This query links the category, film_category, film, inventory, and rental tables. The category table contains the movie categories, 
whereas the film_category table links films to categories. The film table contains details of the films, and the inventory table holds the data of each film.  
Finally, the rental table records each rental transaction.  The COUNT(r.rental_id) function counts the total number of rentals for each category, 
and the results are group by the category name.  
The query will display each movie category along with the total number of rentals. */

/* Question 2: 

Find the average rental rate of movies in each language. 

Hint: JOIN film and language tables, then use AVG () and GROUP BY. */

SELECT l.name AS Language, AVG(f.rental_rate) AS 'Average Rental Rate'
FROM language l
JOIN film f ON l.language_id = f.language_id
GROUP BY l.name;

/* Answer : This query joins the `language` and `film` tables.  The `language` table has the details of the languages available for the films, while the `film` 
table gives the rental rate for each film.  The `AVG(f.rental_rate)` function defines the average rental rate for films in each language.  
The results are grouped by the language name (`l.name`), providing the average rental rate for each language in the database.  
However, only one language is used in the `film` table, the query will return only that language's average rental rate, 
even though there are many languages in the `language` table. */

-- JOINS :

/* Question 3: 

Retrieve the customer names along with the total amount they've spent on rentals. 

Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY. */

SELECT CONCAT(c.first_name, ' ', c.last_name) AS 'Customer Name', SUM(p.amount) AS 'Total Amount Spent'
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id;

/* This query links the customer and payment tables. The customer table holds the first and last names of consumers, whereas the payment table tracks the rental payments.  
The CONCAT(c.first_name, ' ', c.last_name) method combines the first and last names into a single column called Customer Name.  
The SUM(p.amount) function determines the total amount spent by each client on rentals.  
The data is gathered by GROUP BY Function in customer_id to display the entire name of each customer along with the total amount they have spent. */

/* Question 4: 

List the titles of movies rented by each customer in a particular city (e.g., 'London'). 

Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY. */

SELECT CONCAT(c.first_name, ' ', c.last_name) AS 'Customer Name', f.title AS 'Movie Title'
FROM customer c
JOIN address a ON c.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
WHERE ci.city = 'London';

/* Answer : This query connects several tables: customer, address, city, rental, inventory, and film.  
The customer table holds customer information, and the address table links customers to addresses.  
The city table holds city names, and the rental table monitors rentals by consumers.  
The inventory table relates films to particular inventory items, while the film table contains movie details, including titles.  
The WHERE clause filters the results to show only those consumers who rented movies in the city of 'London'.  
The query gets the entire name of each consumer together with the titles of the movies they rented in London. */

-- Advanced Joins and GROUP BY: 

/* Question 5: 

Display the top 5 rented movies along with the number of times they've been rented. 

Hint: JOIN film, inventory, and rental tables, then use cOUNT() and GROUP BY, and limit the results. */

SELECT f.title AS 'Movie Title', COUNT(r.rental_id) AS RentalCount
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id
ORDER BY RentalCount DESC
LIMIT 5;

/* Answer : This query connects the film, inventory, and rental tables.  
The film table holds the movie titles, while the inventory table links each film to its available copies, and the rental table records each rental transaction.  
The COUNT(r.rental_id) method counts the number of rentals for each movie.  
The results are grouped by f.film_id, and sorted in decreasing order of the rental count (ORDER BY RentalCount DESC) to reveal the most rented movies.  
The LIMIT 5 condition ensures that only the top 5 rented movies are displayed. */

/* Question 6: 

Determine the customers who have rented movies from both stores (store ID 1 and store ID 2). 

Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY. */

SELECT CONCAT(c.first_name, ' ', c.last_name) AS 'Customer Name'
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
WHERE i.store_id IN (1, 2)
GROUP BY c.customer_id
HAVING COUNT(DISTINCT i.store_id) = 2;

/* Answer: This query links the customer, rental, and inventory tables.  
The customer table gives customer details, the rental table monitors each rental transaction, and the inventory table links rentals to particular retailers.  
The WHERE clause limit the results to include only those rentals from shop ID 1 and store ID 2.  The GROUP BY clause groups the results by c.customer_id (by each customer).  
The HAVING COUNT(DISTINCT i.store_id) = 2 condition ensures that only consumers who have rented from both stores (store ID 1 and store ID 2) are included in the result. */













